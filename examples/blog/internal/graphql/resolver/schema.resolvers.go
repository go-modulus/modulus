package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"blog/internal/blog/storage"
	"blog/internal/graphql/generated"
	"context"
	"time"
)

// Ping is the resolver for the ping field.
func (r *mutationResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

// PublishedAt is the resolver for the publishedAt field.
func (r *postResolver) PublishedAt(ctx context.Context, obj *storage.Post) (*time.Time, error) {
	if obj.PublishedAt.Valid {
		return &obj.PublishedAt.Time, nil
	}
	return nil, nil
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

// Ping is the resolver for the ping field.
func (r *subscriptionResolver) Ping(ctx context.Context) (<-chan string, error) {
	ch := make(chan string)
	done := ctx.Done()

	go func() {
		timer := time.NewTimer(5 * time.Second)
		for {
			select {
			case now := <-timer.C:
				ch <- now.String()
			case <-done:
				close(ch)
				return
			}
		}
	}()
	return ch, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
