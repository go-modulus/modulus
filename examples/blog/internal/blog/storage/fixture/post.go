// Code generated by sqlc-fixture plugin for SQLc. DO NOT EDIT.

package fixture

import (
	"blog/internal/blog/storage"
	"context"
	uuid "github.com/gofrs/uuid"
	null "gopkg.in/guregu/null.v4"
	"testing"
	"time"
)

type PostFixture struct {
	entity storage.Post
	db     storage.DBTX
}

func NewPostFixture(db storage.DBTX, defaultEntity storage.Post) *PostFixture {
	return &PostFixture{
		db:     db,
		entity: defaultEntity,
	}
}

func (f *PostFixture) ID(iD uuid.UUID) *PostFixture {
	c := f.clone()
	c.entity.ID = iD
	return c
}

func (f *PostFixture) Title(title string) *PostFixture {
	c := f.clone()
	c.entity.Title = title
	return c
}

func (f *PostFixture) Preview(preview string) *PostFixture {
	c := f.clone()
	c.entity.Preview = preview
	return c
}

func (f *PostFixture) Content(content string) *PostFixture {
	c := f.clone()
	c.entity.Content = content
	return c
}

func (f *PostFixture) Status(status storage.PostStatus) *PostFixture {
	c := f.clone()
	c.entity.Status = status
	return c
}

func (f *PostFixture) CreatedAt(createdAt time.Time) *PostFixture {
	c := f.clone()
	c.entity.CreatedAt = createdAt
	return c
}

func (f *PostFixture) UpdatedAt(updatedAt time.Time) *PostFixture {
	c := f.clone()
	c.entity.UpdatedAt = updatedAt
	return c
}

func (f *PostFixture) PublishedAt(publishedAt null.Time) *PostFixture {
	c := f.clone()
	c.entity.PublishedAt = publishedAt
	return c
}

func (f *PostFixture) DeletedAt(deletedAt null.Time) *PostFixture {
	c := f.clone()
	c.entity.DeletedAt = deletedAt
	return c
}

func (f *PostFixture) AuthorID(authorID uuid.UUID) *PostFixture {
	c := f.clone()
	c.entity.AuthorID = authorID
	return c
}

func (f *PostFixture) clone() *PostFixture {
	return &PostFixture{
		db:     f.db,
		entity: f.entity,
	}
}

func (f *PostFixture) save(ctx context.Context) error {
	query := `INSERT INTO "blog"."post"
            ("id", "title", "preview", "content", "status", "created_at", "updated_at", "published_at", "deleted_at", "author_id")
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
            RETURNING "id", "title", "preview", "content", "status", "created_at", "updated_at", "published_at", "deleted_at", "author_id"
        `
	row := f.db.QueryRow(ctx, query,
		f.entity.ID,
		f.entity.Title,
		f.entity.Preview,
		f.entity.Content,
		f.entity.Status,
		f.entity.CreatedAt,
		f.entity.UpdatedAt,
		f.entity.PublishedAt,
		f.entity.DeletedAt,
		f.entity.AuthorID,
	)
	err := row.Scan(
		&f.entity.ID,
		&f.entity.Title,
		&f.entity.Preview,
		&f.entity.Content,
		&f.entity.Status,
		&f.entity.CreatedAt,
		&f.entity.UpdatedAt,
		&f.entity.PublishedAt,
		&f.entity.DeletedAt,
		&f.entity.AuthorID,
	)
	return err
}

func (f *PostFixture) GetEntity() storage.Post {
	return f.entity
}

func (f *PostFixture) Create(tb testing.TB) *PostFixture {
	err := f.save(context.Background())
	if err != nil {
		tb.Fatalf("failed to create Post: %v", err)
	}
	f.Cleanup(tb)
	c := f.clone()
	return c
}

// Cleanup calls testing.TB.Cleanup() function with providing a callback inside it.
// This callback will delete a record from the table by primary key when test will be finished.
func (f *PostFixture) Cleanup(tb testing.TB) *PostFixture {
	tb.Cleanup(
		func() {
			query := `DELETE FROM "blog"."post" WHERE id = $1`
			_, err := f.db.Exec(context.Background(), query, f.entity.ID)

			if err != nil {
				tb.Fatalf("failed to cleanup Post: %v", err)
			}
		})

	return f
}

func (f *PostFixture) PullUpdates(tb testing.TB) *PostFixture {
	c := f.clone()
	ctx := context.Background()
	query := `SELECT "id", "title", "preview", "content", "status", "created_at", "updated_at", "published_at", "deleted_at", "author_id" FROM "blog"."post" WHERE id = $1`
	row := f.db.QueryRow(ctx, query,
		c.entity.ID,
	)

	err := row.Scan(
		&c.entity.ID,
		&c.entity.Title,
		&c.entity.Preview,
		&c.entity.Content,
		&c.entity.Status,
		&c.entity.CreatedAt,
		&c.entity.UpdatedAt,
		&c.entity.PublishedAt,
		&c.entity.DeletedAt,
		&c.entity.AuthorID,
	)
	if err != nil {
		tb.Fatalf("failed to actualize data Post: %v", err)
	}
	return c
}

func (f *PostFixture) PushUpdates(tb testing.TB) *PostFixture {
	c := f.clone()
	query := `
        UPDATE "blog"."post" SET 
            "title" = $2,
            "preview" = $3,
            "content" = $4,
            "status" = $5,
            "created_at" = $6,
            "updated_at" = $7,
            "published_at" = $8,
            "deleted_at" = $9,
            "author_id" = $10
        WHERE "id" = $1
        `
	_, err := f.db.Exec(
		context.Background(),
		query,
		f.entity.ID,
		f.entity.Title,
		f.entity.Preview,
		f.entity.Content,
		f.entity.Status,
		f.entity.CreatedAt,
		f.entity.UpdatedAt,
		f.entity.PublishedAt,
		f.entity.DeletedAt,
		f.entity.AuthorID,
	)
	if err != nil {
		tb.Fatalf("failed to push the data Post: %v", err)
	}
	return c
}
