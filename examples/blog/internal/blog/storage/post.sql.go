// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO blog.post (id, title, preview, content)
VALUES ($1::uuid, $2::text, $3::text, $4::text)
RETURNING id, title, preview, content, status, created_at, updated_at, published_at, deleted_at`

type CreatePostParams struct {
	ID      uuid.UUID `db:"id" json:"id"`
	Title   string    `db:"title" json:"title"`
	Preview string    `db:"preview" json:"preview"`
	Content string    `db:"content" json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Preview,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Preview,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findPost = `-- name: FindPost :one
SELECT id, title, preview, content, status, created_at, updated_at, published_at, deleted_at
FROM blog.post
WHERE id = $1::uuid`

func (q *Queries) FindPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, findPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Preview,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findPosts = `-- name: FindPosts :many
SELECT id, title, preview, content, status, created_at, updated_at, published_at, deleted_at
FROM blog.post
WHERE status = 'published'
ORDER BY published_at DESC`

func (q *Queries) FindPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, findPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Preview,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishPost = `-- name: PublishPost :one
UPDATE blog.post
SET status       = 'published',
    published_at = now()
WHERE status = 'draft'
  AND id = $1::uuid
RETURNING id, title, preview, content, status, created_at, updated_at, published_at, deleted_at`

func (q *Queries) PublishPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, publishPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Preview,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.DeletedAt,
	)
	return i, err
}
