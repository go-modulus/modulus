// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reset_password_request.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const createResetPasswordRequest = `-- name: CreateResetPasswordRequest :one
INSERT INTO auth.reset_password_request
    (id, account_id, token)
VALUES ($1, $2, $3)
RETURNING id, account_id, status, token, last_send_at, used_at, created_at`

type CreateResetPasswordRequestParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	AccountID uuid.UUID `db:"account_id" json:"accountId"`
	Token     string    `db:"token" json:"token"`
}

func (q *Queries) CreateResetPasswordRequest(ctx context.Context, arg CreateResetPasswordRequestParams) (ResetPasswordRequest, error) {
	row := q.db.QueryRow(ctx, createResetPasswordRequest, arg.ID, arg.AccountID, arg.Token)
	var i ResetPasswordRequest
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Status,
		&i.Token,
		&i.LastSendAt,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteResetPasswordRequests = `-- name: DeleteResetPasswordRequests :exec
DELETE FROM auth.reset_password_request
WHERE account_id = $1`

func (q *Queries) DeleteResetPasswordRequests(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteResetPasswordRequests, accountID)
	return err
}

const expireResetPasswordRequest = `-- name: ExpireResetPasswordRequest :exec
UPDATE auth.reset_password_request
SET status  = 'expired'
WHERE id = $1`

func (q *Queries) ExpireResetPasswordRequest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, expireResetPasswordRequest, id)
	return err
}

const getReadyForUseResetPasswordRequest = `-- name: GetReadyForUseResetPasswordRequest :one
SELECT id, account_id, status, token, last_send_at, used_at, created_at
FROM auth.reset_password_request
WHERE status = 'active' AND account_id = $1`

func (q *Queries) GetReadyForUseResetPasswordRequest(ctx context.Context, accountID uuid.UUID) (ResetPasswordRequest, error) {
	row := q.db.QueryRow(ctx, getReadyForUseResetPasswordRequest, accountID)
	var i ResetPasswordRequest
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Status,
		&i.Token,
		&i.LastSendAt,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getResetPasswordRequestByToken = `-- name: GetResetPasswordRequestByToken :one
SELECT id, account_id, status, token, last_send_at, used_at, created_at
FROM auth.reset_password_request
WHERE token = $1`

func (q *Queries) GetResetPasswordRequestByToken(ctx context.Context, token string) (ResetPasswordRequest, error) {
	row := q.db.QueryRow(ctx, getResetPasswordRequestByToken, token)
	var i ResetPasswordRequest
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Status,
		&i.Token,
		&i.LastSendAt,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateLastSentRequest = `-- name: UpdateLastSentRequest :exec
UPDATE auth.reset_password_request
SET last_send_at = now()
WHERE id = $1`

func (q *Queries) UpdateLastSentRequest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateLastSentRequest, id)
	return err
}

const useResetPasswordRequest = `-- name: UseResetPasswordRequest :exec
UPDATE auth.reset_password_request
SET status  = 'used',
    used_at = now()
WHERE id = $1`

func (q *Queries) UseResetPasswordRequest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, useResetPasswordRequest, id)
	return err
}
