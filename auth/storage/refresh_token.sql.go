// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_token.sql

package storage

import (
	"context"
	"time"

	uuid "github.com/gofrs/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO auth.refresh_token (hash, session_id, identity_id, expires_at)
VALUES ($1::text, $2::uuid, $3, $4)
RETURNING hash, session_id, identity_id, revoked_at, expires_at, created_at`

type CreateRefreshTokenParams struct {
	Hash       string    `db:"hash" json:"hash"`
	SessionID  uuid.UUID `db:"session_id" json:"sessionId"`
	IdentityID uuid.UUID `db:"identity_id" json:"identityId"`
	ExpiresAt  time.Time `db:"expires_at" json:"expiresAt"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.Hash,
		arg.SessionID,
		arg.IdentityID,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Hash,
		&i.SessionID,
		&i.IdentityID,
		&i.RevokedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const expireSessionRefreshTokens = `-- name: ExpireSessionRefreshTokens :exec
UPDATE auth.refresh_token
SET expires_at = $1
WHERE session_id = $2 AND revoked_at IS NULL
  AND expires_at > now()`

type ExpireSessionRefreshTokensParams struct {
	ExpiresAt time.Time `db:"expires_at" json:"expiresAt"`
	SessionID uuid.UUID `db:"session_id" json:"sessionId"`
}

func (q *Queries) ExpireSessionRefreshTokens(ctx context.Context, arg ExpireSessionRefreshTokensParams) error {
	_, err := q.db.Exec(ctx, expireSessionRefreshTokens, arg.ExpiresAt, arg.SessionID)
	return err
}

const findRefreshTokenByHash = `-- name: FindRefreshTokenByHash :one
SELECT hash, session_id, identity_id, revoked_at, expires_at, created_at
FROM auth.refresh_token
WHERE hash = $1`

func (q *Queries) FindRefreshTokenByHash(ctx context.Context, hash string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, findRefreshTokenByHash, hash)
	var i RefreshToken
	err := row.Scan(
		&i.Hash,
		&i.SessionID,
		&i.IdentityID,
		&i.RevokedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE auth.refresh_token
SET revoked_at = now()
WHERE hash = $1 AND revoked_at IS NULL`

func (q *Queries) RevokeRefreshToken(ctx context.Context, hash string) error {
	_, err := q.db.Exec(ctx, revokeRefreshToken, hash)
	return err
}

const revokeSessionRefreshTokens = `-- name: RevokeSessionRefreshTokens :exec
UPDATE auth.refresh_token
SET revoked_at = now()
WHERE session_id = $1 AND revoked_at IS NULL`

func (q *Queries) RevokeSessionRefreshTokens(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeSessionRefreshTokens, sessionID)
	return err
}

const revokeSessionsRefreshTokens = `-- name: RevokeSessionsRefreshTokens :exec
UPDATE auth.refresh_token
SET revoked_at = now()
WHERE session_id = ANY($1::uuid[]) AND revoked_at IS NULL`

func (q *Queries) RevokeSessionsRefreshTokens(ctx context.Context, sessionIds []uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeSessionsRefreshTokens, sessionIds)
	return err
}
