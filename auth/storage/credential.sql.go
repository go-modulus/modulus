// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credential.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
	null "gopkg.in/guregu/null.v4"
)

const createCredential = `-- name: CreateCredential :one
INSERT INTO "auth"."credential"
    (account_id, type, hash, expired_at)
VALUES ($1::uuid, $2::text, $3::text, $4)
RETURNING hash, account_id, type, expired_at, created_at`

type CreateCredentialParams struct {
	AccountID uuid.UUID `db:"account_id" json:"accountId"`
	Type      string    `db:"type" json:"type"`
	Hash      string    `db:"hash" json:"hash"`
	ExpiredAt null.Time `db:"expired_at" json:"expiredAt"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, createCredential,
		arg.AccountID,
		arg.Type,
		arg.Hash,
		arg.ExpiredAt,
	)
	var i Credential
	err := row.Scan(
		&i.Hash,
		&i.AccountID,
		&i.Type,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const findAllCredentialsOfType = `-- name: FindAllCredentialsOfType :many
SELECT hash, account_id, type, expired_at, created_at
FROM "auth"."credential"
WHERE type = $1::text
ORDER BY created_at DESC`

func (q *Queries) FindAllCredentialsOfType(ctx context.Context, type_ string) ([]Credential, error) {
	rows, err := q.db.Query(ctx, findAllCredentialsOfType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.Hash,
			&i.AccountID,
			&i.Type,
			&i.ExpiredAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLastCredential = `-- name: FindLastCredential :one
SELECT hash, account_id, type, expired_at, created_at
FROM "auth"."credential"
WHERE account_id = $1::uuid
ORDER BY created_at DESC`

func (q *Queries) FindLastCredential(ctx context.Context, accountID uuid.UUID) (Credential, error) {
	row := q.db.QueryRow(ctx, findLastCredential, accountID)
	var i Credential
	err := row.Scan(
		&i.Hash,
		&i.AccountID,
		&i.Type,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const findLastCredentialOfType = `-- name: FindLastCredentialOfType :one
SELECT hash, account_id, type, expired_at, created_at
FROM "auth"."credential"
WHERE account_id = $1::uuid
AND type = $2::text
ORDER BY created_at DESC`

type FindLastCredentialOfTypeParams struct {
	AccountID uuid.UUID `db:"account_id" json:"accountId"`
	Type      string    `db:"type" json:"type"`
}

func (q *Queries) FindLastCredentialOfType(ctx context.Context, arg FindLastCredentialOfTypeParams) (Credential, error) {
	row := q.db.QueryRow(ctx, findLastCredentialOfType, arg.AccountID, arg.Type)
	var i Credential
	err := row.Scan(
		&i.Hash,
		&i.AccountID,
		&i.Type,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const removeCredentialsOfAccount = `-- name: RemoveCredentialsOfAccount :exec
DELETE FROM "auth"."credential"
WHERE account_id = $1::uuid`

func (q *Queries) RemoveCredentialsOfAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeCredentialsOfAccount, accountID)
	return err
}
