// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: credential.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
	null "gopkg.in/guregu/null.v4"
)

const createCredential = `-- name: CreateCredential :one
INSERT INTO "auth"."credential"
    (id, identity_id, type, credential_hash, expired_at)
VALUES ($1::uuid, $2::uuid, $3::text, $4::text, $5)
RETURNING credential_hash, identity_id, type, expired_at, created_at`

type CreateCredentialParams struct {
	ID             uuid.UUID `db:"id" json:"id"`
	IdentityID     uuid.UUID `db:"identity_id" json:"identityId"`
	Type           string    `db:"type" json:"type"`
	CredentialHash string    `db:"credential_hash" json:"credentialHash"`
	ExpiredAt      null.Time `db:"expired_at" json:"expiredAt"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, createCredential,
		arg.ID,
		arg.IdentityID,
		arg.Type,
		arg.CredentialHash,
		arg.ExpiredAt,
	)
	var i Credential
	err := row.Scan(
		&i.CredentialHash,
		&i.IdentityID,
		&i.Type,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const findAllCredentialsOfType = `-- name: FindAllCredentialsOfType :many
SELECT credential_hash, identity_id, type, expired_at, created_at
FROM "auth"."credential"
WHERE type = $1::text
ORDER BY created_at DESC`

func (q *Queries) FindAllCredentialsOfType(ctx context.Context, type_ string) ([]Credential, error) {
	rows, err := q.db.Query(ctx, findAllCredentialsOfType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.CredentialHash,
			&i.IdentityID,
			&i.Type,
			&i.ExpiredAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLastCredential = `-- name: FindLastCredential :one
SELECT credential_hash, identity_id, type, expired_at, created_at
FROM "auth"."credential"
WHERE identity_id = $1::uuid
ORDER BY created_at DESC`

func (q *Queries) FindLastCredential(ctx context.Context, identityID uuid.UUID) (Credential, error) {
	row := q.db.QueryRow(ctx, findLastCredential, identityID)
	var i Credential
	err := row.Scan(
		&i.CredentialHash,
		&i.IdentityID,
		&i.Type,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const findLastCredentialOfType = `-- name: FindLastCredentialOfType :one
SELECT credential_hash, identity_id, type, expired_at, created_at
FROM "auth"."credential"
WHERE identity_id = $1::uuid
AND type = $2::text
ORDER BY created_at DESC`

type FindLastCredentialOfTypeParams struct {
	IdentityID uuid.UUID `db:"identity_id" json:"identityId"`
	Type       string    `db:"type" json:"type"`
}

func (q *Queries) FindLastCredentialOfType(ctx context.Context, arg FindLastCredentialOfTypeParams) (Credential, error) {
	row := q.db.QueryRow(ctx, findLastCredentialOfType, arg.IdentityID, arg.Type)
	var i Credential
	err := row.Scan(
		&i.CredentialHash,
		&i.IdentityID,
		&i.Type,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
