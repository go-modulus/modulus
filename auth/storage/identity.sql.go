// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: identity.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const activateIdentity = `-- name: ActivateIdentity :exec
update "auth"."identity"
set status = 'active'::auth.identity_status
where id = $1::uuid`

func (q *Queries) ActivateIdentity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, activateIdentity, id)
	return err
}

const blockIdentitiesOfAccount = `-- name: BlockIdentitiesOfAccount :exec
update "auth"."identity"
set status = 'blocked'::auth.identity_status
where account_id = $1::uuid`

func (q *Queries) BlockIdentitiesOfAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, blockIdentitiesOfAccount, accountID)
	return err
}

const blockIdentity = `-- name: BlockIdentity :exec
update "auth"."identity"
set status = 'blocked'::auth.identity_status
where id = $1::uuid`

func (q *Queries) BlockIdentity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, blockIdentity, id)
	return err
}

const createIdentity = `-- name: CreateIdentity :one
insert into "auth"."identity"
    (id, identity, account_id, "data", "type")
values ($1::uuid, $2::text, $3::uuid, $4::jsonb, $5::text)
RETURNING id, identity, account_id, status, data, updated_at, created_at, type`

type CreateIdentityParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Identity  string    `db:"identity" json:"identity"`
	AccountID uuid.UUID `db:"account_id" json:"accountId"`
	Data      []byte    `db:"data" json:"data"`
	Type      string    `db:"type" json:"type"`
}

func (q *Queries) CreateIdentity(ctx context.Context, arg CreateIdentityParams) (Identity, error) {
	row := q.db.QueryRow(ctx, createIdentity,
		arg.ID,
		arg.Identity,
		arg.AccountID,
		arg.Data,
		arg.Type,
	)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.AccountID,
		&i.Status,
		&i.Data,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const findAccountIdentities = `-- name: FindAccountIdentities :many
select id, identity, account_id, status, data, updated_at, created_at, type
from "auth"."identity"
where account_id = $1::uuid`

func (q *Queries) FindAccountIdentities(ctx context.Context, accountID uuid.UUID) ([]Identity, error) {
	rows, err := q.db.Query(ctx, findAccountIdentities, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Identity
	for rows.Next() {
		var i Identity
		if err := rows.Scan(
			&i.ID,
			&i.Identity,
			&i.AccountID,
			&i.Status,
			&i.Data,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findIdentity = `-- name: FindIdentity :one
select id, identity, account_id, status, data, updated_at, created_at, type
from "auth"."identity"
where identity = $1::text`

func (q *Queries) FindIdentity(ctx context.Context, identity string) (Identity, error) {
	row := q.db.QueryRow(ctx, findIdentity, identity)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.AccountID,
		&i.Status,
		&i.Data,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const findIdentityById = `-- name: FindIdentityById :one
select id, identity, account_id, status, data, updated_at, created_at, type
from "auth"."identity"
where id = $1::uuid`

func (q *Queries) FindIdentityById(ctx context.Context, id uuid.UUID) (Identity, error) {
	row := q.db.QueryRow(ctx, findIdentityById, id)
	var i Identity
	err := row.Scan(
		&i.ID,
		&i.Identity,
		&i.AccountID,
		&i.Status,
		&i.Data,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const removeIdentitiesOfAccount = `-- name: RemoveIdentitiesOfAccount :exec
delete from "auth"."identity"
where account_id = $1::uuid`

func (q *Queries) RemoveIdentitiesOfAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeIdentitiesOfAccount, accountID)
	return err
}

const removeIdentity = `-- name: RemoveIdentity :exec
delete from "auth"."identity"
where id = $1`

func (q *Queries) RemoveIdentity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeIdentity, id)
	return err
}

const requestIdentityVerification = `-- name: RequestIdentityVerification :exec
update "auth"."identity"
set status = 'not-verified'::auth.identity_status
where id = $1::uuid`

func (q *Queries) RequestIdentityVerification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, requestIdentityVerification, id)
	return err
}
