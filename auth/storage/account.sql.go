// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const addRoles = `-- name: AddRoles :exec
update "auth"."account"
set roles = array(select distinct unnest(roles || $1::text[]))
where id = $2::uuid`

type AddRolesParams struct {
	Roles []string  `db:"roles" json:"roles"`
	ID    uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) AddRoles(ctx context.Context, arg AddRolesParams) error {
	_, err := q.db.Exec(ctx, addRoles, arg.Roles, arg.ID)
	return err
}

const blockAccount = `-- name: BlockAccount :exec
UPDATE auth.account
SET status = 'blocked'::auth.account_status
WHERE id = $1`

func (q *Queries) BlockAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, blockAccount, id)
	return err
}

const findAccount = `-- name: FindAccount :one
SELECT id, status, roles, updated_at, created_at
FROM auth.account
WHERE id = $1`

func (q *Queries) FindAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Roles,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const registerAccount = `-- name: RegisterAccount :one
INSERT INTO auth.account (id)
VALUES ($1) RETURNING id, status, roles, updated_at, created_at`

func (q *Queries) RegisterAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, registerAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Roles,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const removeAccount = `-- name: RemoveAccount :exec
DELETE FROM auth.account
WHERE id = $1`

func (q *Queries) RemoveAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAccount, id)
	return err
}

const removeRoles = `-- name: RemoveRoles :exec
update "auth"."account"
set roles = array(select distinct unnest(roles) except select distinct unnest($1::text[]))
where id = $2::uuid`

type RemoveRolesParams struct {
	Roles []string  `db:"roles" json:"roles"`
	ID    uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) RemoveRoles(ctx context.Context, arg RemoveRolesParams) error {
	_, err := q.db.Exec(ctx, removeRoles, arg.Roles, arg.ID)
	return err
}

const unblockAccount = `-- name: UnblockAccount :exec
UPDATE auth.account
SET status = 'active'::auth.account_status
WHERE id = $1`

func (q *Queries) UnblockAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, unblockAccount, id)
	return err
}
