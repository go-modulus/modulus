// Code generated by sqlc-fixture plugin for SQLc. DO NOT EDIT.

package fixture

import (
	"context"
	"github.com/go-modulus/modulus/auth/storage"
	uuid "github.com/gofrs/uuid"
	null "gopkg.in/guregu/null.v4"
	"testing"
	"time"
)

type ResetPasswordRequestFixture struct {
	entity storage.ResetPasswordRequest
	db     storage.DBTX
}

func NewResetPasswordRequestFixture(db storage.DBTX, defaultEntity storage.ResetPasswordRequest) *ResetPasswordRequestFixture {
	return &ResetPasswordRequestFixture{
		db:     db,
		entity: defaultEntity,
	}
}

func (f *ResetPasswordRequestFixture) ID(iD uuid.UUID) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.ID = iD
	return c
}

func (f *ResetPasswordRequestFixture) AccountID(accountID uuid.UUID) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.AccountID = accountID
	return c
}

func (f *ResetPasswordRequestFixture) Status(status storage.ResetPasswordStatus) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.Status = status
	return c
}

func (f *ResetPasswordRequestFixture) Token(token string) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.Token = token
	return c
}

func (f *ResetPasswordRequestFixture) LastSendAt(lastSendAt null.Time) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.LastSendAt = lastSendAt
	return c
}

func (f *ResetPasswordRequestFixture) UsedAt(usedAt null.Time) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.UsedAt = usedAt
	return c
}

func (f *ResetPasswordRequestFixture) CreatedAt(createdAt time.Time) *ResetPasswordRequestFixture {
	c := f.clone()
	c.entity.CreatedAt = createdAt
	return c
}

func (f *ResetPasswordRequestFixture) clone() *ResetPasswordRequestFixture {
	return &ResetPasswordRequestFixture{
		db:     f.db,
		entity: f.entity,
	}
}

func (f *ResetPasswordRequestFixture) save(ctx context.Context) error {
	query := `INSERT INTO "auth"."reset_password_request"
            ("id", "account_id", "status", "token", "last_send_at", "used_at", "created_at")
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING "id", "account_id", "status", "token", "last_send_at", "used_at", "created_at"
        `
	row := f.db.QueryRow(ctx, query,
		f.entity.ID,
		f.entity.AccountID,
		f.entity.Status,
		f.entity.Token,
		f.entity.LastSendAt,
		f.entity.UsedAt,
		f.entity.CreatedAt,
	)
	err := row.Scan(
		&f.entity.ID,
		&f.entity.AccountID,
		&f.entity.Status,
		&f.entity.Token,
		&f.entity.LastSendAt,
		&f.entity.UsedAt,
		&f.entity.CreatedAt,
	)
	return err
}

func (f *ResetPasswordRequestFixture) GetEntity() storage.ResetPasswordRequest {
	return f.entity
}

func (f *ResetPasswordRequestFixture) Create(tb testing.TB) *ResetPasswordRequestFixture {
	err := f.save(context.Background())
	if err != nil {
		tb.Fatalf("failed to create ResetPasswordRequest: %v", err)
	}
	f.Cleanup(tb)
	c := f.clone()
	return c
}

// Cleanup calls testing.TB.Cleanup() function with providing a callback inside it.
// This callback will delete a record from the table by primary key when test will be finished.
func (f *ResetPasswordRequestFixture) Cleanup(tb testing.TB) *ResetPasswordRequestFixture {
	tb.Cleanup(
		func() {
			query := `DELETE FROM "auth"."reset_password_request" WHERE id = $1`
			_, err := f.db.Exec(context.Background(), query, f.entity.ID)

			if err != nil {
				tb.Fatalf("failed to cleanup ResetPasswordRequest: %v", err)
			}
		})

	return f
}

func (f *ResetPasswordRequestFixture) PullUpdates(tb testing.TB) *ResetPasswordRequestFixture {
	c := f.clone()
	ctx := context.Background()
	query := `SELECT "id", "account_id", "status", "token", "last_send_at", "used_at", "created_at" FROM "auth"."reset_password_request" WHERE id = $1`
	row := f.db.QueryRow(ctx, query,
		c.entity.ID,
	)

	err := row.Scan(
		&c.entity.ID,
		&c.entity.AccountID,
		&c.entity.Status,
		&c.entity.Token,
		&c.entity.LastSendAt,
		&c.entity.UsedAt,
		&c.entity.CreatedAt,
	)
	if err != nil {
		tb.Fatalf("failed to actualize data ResetPasswordRequest: %v", err)
	}
	return c
}

func (f *ResetPasswordRequestFixture) PushUpdates(tb testing.TB) *ResetPasswordRequestFixture {
	c := f.clone()
	query := `
        UPDATE "auth"."reset_password_request" SET 
            "account_id" = $2,
            "status" = $3,
            "token" = $4,
            "last_send_at" = $5,
            "used_at" = $6,
            "created_at" = $7
        WHERE "id" = $1
        `
	_, err := f.db.Exec(
		context.Background(),
		query,
		f.entity.ID,
		f.entity.AccountID,
		f.entity.Status,
		f.entity.Token,
		f.entity.LastSendAt,
		f.entity.UsedAt,
		f.entity.CreatedAt,
	)
	if err != nil {
		tb.Fatalf("failed to push the data ResetPasswordRequest: %v", err)
	}
	return c
}
