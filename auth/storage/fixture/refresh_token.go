// Code generated by sqlc-fixture plugin for SQLc. DO NOT EDIT.

package fixture

import (
	"context"
	"github.com/go-modulus/modulus/auth/storage"
	uuid "github.com/gofrs/uuid"
	null "gopkg.in/guregu/null.v4"
	"testing"
	"time"
)

type RefreshTokenFixture struct {
	entity storage.RefreshToken
	db     storage.DBTX
}

func NewRefreshTokenFixture(db storage.DBTX, defaultEntity storage.RefreshToken) *RefreshTokenFixture {
	return &RefreshTokenFixture{
		db:     db,
		entity: defaultEntity,
	}
}

func (f *RefreshTokenFixture) Hash(hash string) *RefreshTokenFixture {
	c := f.clone()
	c.entity.Hash = hash
	return c
}

func (f *RefreshTokenFixture) SessionID(sessionID uuid.UUID) *RefreshTokenFixture {
	c := f.clone()
	c.entity.SessionID = sessionID
	return c
}

func (f *RefreshTokenFixture) Data(data []byte) *RefreshTokenFixture {
	c := f.clone()
	c.entity.Data = data
	return c
}

func (f *RefreshTokenFixture) RevokedAt(revokedAt null.Time) *RefreshTokenFixture {
	c := f.clone()
	c.entity.RevokedAt = revokedAt
	return c
}

func (f *RefreshTokenFixture) UsedAt(usedAt null.Time) *RefreshTokenFixture {
	c := f.clone()
	c.entity.UsedAt = usedAt
	return c
}

func (f *RefreshTokenFixture) ExpiresAt(expiresAt time.Time) *RefreshTokenFixture {
	c := f.clone()
	c.entity.ExpiresAt = expiresAt
	return c
}

func (f *RefreshTokenFixture) CreatedAt(createdAt time.Time) *RefreshTokenFixture {
	c := f.clone()
	c.entity.CreatedAt = createdAt
	return c
}

func (f *RefreshTokenFixture) clone() *RefreshTokenFixture {
	return &RefreshTokenFixture{
		db:     f.db,
		entity: f.entity,
	}
}

func (f *RefreshTokenFixture) save(ctx context.Context) error {
	query := `INSERT INTO auth.refresh_token
            (hash, session_id, data, revoked_at, used_at, expires_at, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING hash, session_id, data, revoked_at, used_at, expires_at, created_at
        `
	row := f.db.QueryRow(ctx, query,
		f.entity.Hash,
		f.entity.SessionID,
		f.entity.Data,
		f.entity.RevokedAt,
		f.entity.UsedAt,
		f.entity.ExpiresAt,
		f.entity.CreatedAt,
	)
	err := row.Scan(
		&f.entity.Hash,
		&f.entity.SessionID,
		&f.entity.Data,
		&f.entity.RevokedAt,
		&f.entity.UsedAt,
		&f.entity.ExpiresAt,
		&f.entity.CreatedAt,
	)
	return err
}

func (f *RefreshTokenFixture) GetEntity() storage.RefreshToken {
	return f.entity
}

func (f *RefreshTokenFixture) Create(tb testing.TB) *RefreshTokenFixture {
	err := f.save(context.Background())
	if err != nil {
		tb.Fatalf("failed to create RefreshToken: %v", err)
	}
	f.Cleanup(tb)
	c := f.clone()
	return c
}

// Cleanup calls testing.TB.Cleanup() function with providing a callback inside it.
// This callback will delete a record from the table by primary key when test will be finished.
func (f *RefreshTokenFixture) Cleanup(tb testing.TB) *RefreshTokenFixture {
	tb.Cleanup(
		func() {
			query := `DELETE FROM auth.refresh_token WHERE hash = $1`
			_, err := f.db.Exec(context.Background(), query, f.entity.Hash)

			if err != nil {
				tb.Fatalf("failed to cleanup RefreshToken: %v", err)
			}
		})

	return f
}

func (f *RefreshTokenFixture) PullUpdates(tb testing.TB) *RefreshTokenFixture {
	c := f.clone()
	ctx := context.Background()
	query := `SELECT * FROM auth.refresh_token WHERE hash = $1`
	row := f.db.QueryRow(ctx, query,
		c.entity.Hash,
	)

	err := row.Scan(
		&c.entity.Hash,
		&c.entity.SessionID,
		&c.entity.Data,
		&c.entity.RevokedAt,
		&c.entity.UsedAt,
		&c.entity.ExpiresAt,
		&c.entity.CreatedAt,
	)
	if err != nil {
		tb.Fatalf("failed to actualize data RefreshToken: %v", err)
	}
	return c
}

func (f *RefreshTokenFixture) PushUpdates(tb testing.TB) *RefreshTokenFixture {
	c := f.clone()
	query := `
        UPDATE auth.refresh_token SET 
            session_id = $2,
            data = $3,
            revoked_at = $4,
            used_at = $5,
            expires_at = $6,
            created_at = $7
        WHERE hash = $1
        `
	_, err := f.db.Exec(
		context.Background(),
		query,
		f.entity.Hash,
		f.entity.SessionID,
		f.entity.Data,
		f.entity.RevokedAt,
		f.entity.UsedAt,
		f.entity.ExpiresAt,
		f.entity.CreatedAt,
	)
	if err != nil {
		tb.Fatalf("failed to push the data RefreshToken: %v", err)
	}
	return c
}
