// Code generated by sqlc-fixture plugin for SQLc. DO NOT EDIT.

package fixture

import (
	"context"
	"github.com/go-modulus/modulus/auth/storage"
	uuid "github.com/gofrs/uuid"
	"testing"
	"time"
)

type AccountFixture struct {
	entity storage.Account
	db     storage.DBTX
}

func NewAccountFixture(db storage.DBTX, defaultEntity storage.Account) *AccountFixture {
	return &AccountFixture{
		db:     db,
		entity: defaultEntity,
	}
}

func (f *AccountFixture) ID(iD uuid.UUID) *AccountFixture {
	c := f.clone()
	c.entity.ID = iD
	return c
}

func (f *AccountFixture) Status(status storage.AccountStatus) *AccountFixture {
	c := f.clone()
	c.entity.Status = status
	return c
}

func (f *AccountFixture) Roles(roles []string) *AccountFixture {
	c := f.clone()
	c.entity.Roles = roles
	return c
}

func (f *AccountFixture) UpdatedAt(updatedAt time.Time) *AccountFixture {
	c := f.clone()
	c.entity.UpdatedAt = updatedAt
	return c
}

func (f *AccountFixture) CreatedAt(createdAt time.Time) *AccountFixture {
	c := f.clone()
	c.entity.CreatedAt = createdAt
	return c
}

func (f *AccountFixture) clone() *AccountFixture {
	return &AccountFixture{
		db:     f.db,
		entity: f.entity,
	}
}

func (f *AccountFixture) save(ctx context.Context) error {
	query := `INSERT INTO "auth"."account"
            ("id", "status", "roles", "updated_at", "created_at")
            VALUES ($1, $2, $3, $4, $5)
            RETURNING "id", "status", "roles", "updated_at", "created_at"
        `
	row := f.db.QueryRow(ctx, query,
		f.entity.ID,
		f.entity.Status,
		f.entity.Roles,
		f.entity.UpdatedAt,
		f.entity.CreatedAt,
	)
	err := row.Scan(
		&f.entity.ID,
		&f.entity.Status,
		&f.entity.Roles,
		&f.entity.UpdatedAt,
		&f.entity.CreatedAt,
	)
	return err
}

func (f *AccountFixture) GetEntity() storage.Account {
	return f.entity
}

func (f *AccountFixture) Create(tb testing.TB) *AccountFixture {
	err := f.save(context.Background())
	if err != nil {
		tb.Fatalf("failed to create Account: %v", err)
	}
	f.Cleanup(tb)
	c := f.clone()
	return c
}

// Cleanup calls testing.TB.Cleanup() function with providing a callback inside it.
// This callback will delete a record from the table by primary key when test will be finished.
func (f *AccountFixture) Cleanup(tb testing.TB) *AccountFixture {
	tb.Cleanup(
		func() {
			query := `DELETE FROM "auth"."account" WHERE id = $1`
			_, err := f.db.Exec(context.Background(), query, f.entity.ID)

			if err != nil {
				tb.Fatalf("failed to cleanup Account: %v", err)
			}
		})

	return f
}

func (f *AccountFixture) PullUpdates(tb testing.TB) *AccountFixture {
	c := f.clone()
	ctx := context.Background()
	query := `SELECT "id", "status", "roles", "updated_at", "created_at" FROM "auth"."account" WHERE id = $1`
	row := f.db.QueryRow(ctx, query,
		c.entity.ID,
	)

	err := row.Scan(
		&c.entity.ID,
		&c.entity.Status,
		&c.entity.Roles,
		&c.entity.UpdatedAt,
		&c.entity.CreatedAt,
	)
	if err != nil {
		tb.Fatalf("failed to actualize data Account: %v", err)
	}
	return c
}

func (f *AccountFixture) PushUpdates(tb testing.TB) *AccountFixture {
	c := f.clone()
	query := `
        UPDATE "auth"."account" SET 
            "status" = $2,
            "roles" = $3,
            "updated_at" = $4,
            "created_at" = $5
        WHERE "id" = $1
        `
	_, err := f.db.Exec(
		context.Background(),
		query,
		f.entity.ID,
		f.entity.Status,
		f.entity.Roles,
		f.entity.UpdatedAt,
		f.entity.CreatedAt,
	)
	if err != nil {
		tb.Fatalf("failed to push the data Account: %v", err)
	}
	return c
}
