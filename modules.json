{
  "name": "Modulus framework modules manifest",
  "description": "List of modules available for the Modulus framework",
  "version": "1.0.0",
  "modules": [
    {
      "name": "urfave cli",
      "package": "github.com/go-modulus/modulus/cli",
      "description": "Adds ability to create cli applications in the Modulus framework.",
      "install": {
        "envVars": [
          {
            "key": "",
            "value": "[]",
            "comment": ""
          }
        ]
      },
      "version": "1.0.0"
    },
    {
      "name": "pgx",
      "package": "github.com/go-modulus/modulus/db/pgx",
      "description": "A wrapper for the pgx package to integrate it into the Modulus framework.",
      "install": {
        "envVars": [
          {
            "key": "PGX_DSN",
            "value": "",
            "comment": "Use this variable to set the DSN for the PGX connection. It overwrites the other PG_* variables. Example: PGX_DSN=postgres://postgres:foobar@localhost:5432/test?sslmode=disable"
          },
          {
            "key": "PG_DB_NAME",
            "value": "test",
            "comment": ""
          },
          {
            "key": "PG_HOST",
            "value": "localhost",
            "comment": ""
          },
          {
            "key": "PG_PASSWORD",
            "value": "foobar",
            "comment": ""
          },
          {
            "key": "PG_PORT",
            "value": "5432",
            "comment": ""
          },
          {
            "key": "PG_SSL_MODE",
            "value": "disable",
            "comment": ""
          },
          {
            "key": "PG_USER",
            "value": "postgres",
            "comment": ""
          }
        ],
        "dependencies": [
          "slog logger"
        ]
      },
      "version": "1.0.0"
    },
    {
      "name": "slog logger",
      "package": "github.com/go-modulus/modulus/logger",
      "description": "Adds a slog logger with a zap backend to the Modulus framework.",
      "install": {
        "envVars": [
          {
            "key": "LOGGER_APP",
            "value": "modulus",
            "comment": ""
          },
          {
            "key": "LOGGER_FX_EVENT_LEVEL",
            "value": "info",
            "comment": "Use one of \"debug\", \"info\", \"warn\", \"error\". It sets the maximum level of the fx events that should be logged"
          },
          {
            "key": "LOGGER_LEVEL",
            "value": "debug",
            "comment": "Use one of \"debug\", \"info\", \"warn\", \"error\". It sets the maximum level of the log messages that should be logged"
          },
          {
            "key": "LOGGER_TYPE",
            "value": "console",
            "comment": "Use either \"console\" or \"json\" value"
          }
        ]
      },
      "version": "1.0.0"
    },
    {
      "name": "dbmate migrator",
      "package": "github.com/go-modulus/modulus/db/migrator",
      "description": "Several CLI commands to use DBMate (https://github.com/amacneil/dbmate) migration tool inside your application.",
      "install": {
        "dependencies": [
          "pgx",
          "urfave cli"
        ]
      },
      "version": "1.0.0"
    },
    {
      "name": "chi http",
      "package": "github.com/go-modulus/modulus/http",
      "description": "HTTP module based on the Chi router.",
      "install": {
        "envVars": [
          {
            "key": "HTTP_SYSTEM_ERROR_LOG_LEVEL",
            "value": "error",
            "comment": "Log level for the system errors: dont_log, error, warn, info, debug"
          },
          {
            "key": "HTTP_USER_ERROR_LOG_LEVEL",
            "value": "dont_log",
            "comment": "Log level for the user errors: dont_log, error, warn, info, debug"
          }
        ]
      },
      "version": "1.0.0"
    },
    {
      "name": "gqlgen",
      "package": "github.com/go-modulus/modulus/graphql",
      "description": "Graphql server and generator. It is based on the gqlgen library. It also provides a playground for the graphql server. You need to install the `chi http` module to use this module.",
      "install": {
        "envVars": [
          {
            "key": "GQL_API_URL",
            "value": "/graphql",
            "comment": ""
          },
          {
            "key": "GQL_COMPLEXITY_LIMIT",
            "value": "200",
            "comment": ""
          },
          {
            "key": "GQL_INTROSPECTION_ENABLED",
            "value": "true",
            "comment": ""
          },
          {
            "key": "GQL_PLAYGROUND_ENABLED",
            "value": "true",
            "comment": ""
          },
          {
            "key": "GQL_PLAYGROUND_URL",
            "value": "/playground",
            "comment": ""
          },
          {
            "key": "GQL_RETURN_CAUSE",
            "value": "false",
            "comment": ""
          },
          {
            "key": "GQL_TRACING_ENABLED",
            "value": "false",
            "comment": ""
          }
        ],
        "dependencies": [
          "chi http"
        ],
        "files": [
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/schema.graphql",
            "destFile": "internal/graphql/schema.graphql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/gqlgen.yaml",
            "destFile": "gqlgen.yaml"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/types/time.go",
            "destFile": "internal/graphql/types/time.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/types/time.graphql",
            "destFile": "internal/graphql/types/time.graphql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/types/uuid.go",
            "destFile": "internal/graphql/types/uuid.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/types/uuid.graphql",
            "destFile": "internal/graphql/types/uuid.graphql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/types/void.go",
            "destFile": "internal/graphql/types/void.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/types/void.graphql",
            "destFile": "internal/graphql/types/void.graphql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/gqlgen.mk",
            "destFile": "mk/gqlgen.mk"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/module.go.tmpl",
            "destFile": "internal/graphql/module.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/generated/tools.go",
            "destFile": "internal/graphql/generated/tools.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/model/tools.go",
            "destFile": "internal/graphql/model/tools.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/resolver/resolver.go.tmpl",
            "destFile": "internal/graphql/resolver/resolver.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/graphql/install/resolver/schema.resolvers.go.tmpl",
            "destFile": "internal/graphql/resolver/schema.resolvers.go"
          }
        ],
        "postInstallCommands": [
          {
            "cmdPackage": "github.com/99designs/gqlgen",
            "params": [
              "generate",
              "--config",
              "gqlgen.yaml"
            ]
          }
        ]
      },
      "version": "1.0.0",
      "localPath": "internal/graphql"
    },
    {
      "name": "modulus auth",
      "package": "github.com/go-modulus/modulus/auth",
      "description": "Authentication module. Helps protect HTTP routes with tokens and sessions. If you want to use default storage for identities and tokens, please install pgx module first.",
      "install": {
        "envVars": [
          {
            "key": "AUTH_ACCESS_TOKEN_TTL",
            "value": "1h0m0s",
            "comment": ""
          },
          {
            "key": "AUTH_REFRESH_TOKEN_TTL",
            "value": "720h0m0s",
            "comment": ""
          }
        ],
        "dependencies": [
          "pgx"
        ],
        "files": [
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/auth/storage/migration/20240214134322_auth.sql",
            "destFile": "internal/auth/storage/migration/20240214134322_auth.sql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/auth/storage/migration/20240320084613_auth_account.sql",
            "destFile": "internal/auth/storage/migration/20240320084613_auth_account.sql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/auth/install/module.go.tmpl",
            "destFile": "internal/auth/module.go"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/auth/install/graphql/auth.graphql",
            "destFile": "internal/auth/graphql/auth.graphql"
          },
          {
            "sourceUrl": "https://raw.githubusercontent.com/go-modulus/modulus/refs/heads/main/auth/install/graphql/directive.go",
            "destFile": "internal/auth/graphql/directive.go"
          }
        ],
        "postInstallCommands": [
          {
            "cmdPackage": "github.com/go-modulus/modulus/cmd/mtools",
            "params": [
              "db",
              "migrate"
            ]
          }
        ]
      },
      "version": "1.0.0",
      "localPath": "internal/auth"
    },
    {
      "name": "embedded pg",
      "package": "github.com/go-modulus/modulus/db/embedded",
      "description": "A wrapper for the github.com/fergusstrange/embedded-postgres package to integrate it into the Modulus framework. This package starts the embedded postgres database and creates the user and the database mentioned in PG_* vars. It works together with the github.com/go-modulus/modulus/db/pgx and migration packages.",
      "install": {
        "envVars": [
          {
            "key": "EMBEDDED_POSTGRES_DATA_PATH",
            "value": "/tmp/embeddedpostgres/data",
            "comment": "The path that will be used for the Postgres data directory. If you want to persist data between restarts, set this variable to a path that is not inside the EMBEDDED_POSTGRES_RUNTIME_PATH."
          },
          {
            "key": "EMBEDDED_POSTGRES_RUN",
            "value": "true",
            "comment": "Set this variable to false if you want to disable the embedded postgres database."
          },
          {
            "key": "EMBEDDED_POSTGRES_RUNTIME_PATH",
            "value": "/tmp/embeddedpostgres",
            "comment": ""
          },
          {
            "key": "PG_DB_NAME",
            "value": "test",
            "comment": ""
          },
          {
            "key": "PG_HOST",
            "value": "localhost",
            "comment": ""
          },
          {
            "key": "PG_PASSWORD",
            "value": "foobar",
            "comment": ""
          },
          {
            "key": "PG_PORT",
            "value": "5432",
            "comment": ""
          },
          {
            "key": "PG_SSL_MODE",
            "value": "disable",
            "comment": ""
          },
          {
            "key": "PG_USER",
            "value": "postgres",
            "comment": ""
          }
        ],
        "dependencies": [
          "pgx",
          "dbmate migrator"
        ]
      },
      "version": "1.0.0"
    }
  ]
}